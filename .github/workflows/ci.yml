name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CLUSTER_NAME: mycluster
  KUBECONFIG: ${{ github.workspace }}/.kube/config

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: üõé Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Setup Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo usermod -aG docker $USER
          # No newgrp in CI environment
          sudo chmod 666 /var/run/docker.sock

      - name: ‚öôÔ∏è Install cluster tools
        run: |
          sudo apt-get install -y curl
          curl -sL https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: üèóÔ∏è Create cluster
        run: |
          k3d cluster create $CLUSTER_NAME \
            -p "30004:30004@loadbalancer" \
            --wait
          mkdir -p $(dirname $KUBECONFIG)
          k3d kubeconfig get $CLUSTER_NAME > $KUBECONFIG
          kubectl cluster-info

      - name: üî® Build images
        run: |
          make build
          for service in auth-service patient-service api-gateway billing-service analytics-service; do
            k3d image import $service -c $CLUSTER_NAME
          done

      - name: ‚úÖ Verify images
        run: |
          # Check images in cluster nodes
          kubectl get nodes
          for service in auth-service patient-service api-gateway billing-service analytics-service; do
            echo "Testing image: $service"
            kubectl run test-$service --image=$service --command -- sleep 5 || true
            kubectl wait --for=condition=Ready pod/test-$service --timeout=20s && \
              echo "‚úÖ Image $service verified" || \
              echo "‚ö†Ô∏è Could not verify $service"
            kubectl delete pod test-$service --ignore-not-found
          done

      - name: üöÄ Deploy system
        run: |
          make deploy
          # Set image pull policy to Never for local development
          for service in auth-service patient-service api-gateway billing-service analytics-service; do
            kubectl patch deployment $service -p '{"spec":{"template":{"spec":{"containers":[{"name":"'$service'","imagePullPolicy":"Never"}]}}}}'
          done
          kubectl rollout restart deployment auth-service patient-service api-gateway billing-service analytics-service

      - name: ‚è≥ Wait for services
        run: |
          # Wait for deployments
          for service in auth-service patient-service api-gateway billing-service analytics-service; do
            kubectl rollout status deployment/$service --timeout=180s
          done
          
          # Final status check
          make status

      - name: üß™ Run tests
        run: |
          echo "Testing API endpoints..."
          kubectl port-forward svc/api-gateway 30004:4004 &
          sleep 10  # Wait for port-forward
          
          curl --retry 5 --retry-delay 5 --retry-connrefused -sSf http://localhost:30004/api-docs/auth | grep -q "openapi" || (echo "‚ùå Auth Service API Docs Check Failed"; exit 1)
          curl --retry 5 --retry-delay 5 --retry-connrefused -sSf http://localhost:30004/api-docs/patients | grep -q "openapi" || (echo "‚ùå Patient Service API Docs Check Failed"; exit 1)

      - name: üìä Final status
        if: always()
        run: make status

      - name: üßπ Cleanup
        if: always()
        run: |
          k3d cluster delete $CLUSTER_NAME
          docker system prune -af
