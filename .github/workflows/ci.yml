name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CLUSTER_NAME: mycluster
  KUBECONFIG: ${{ github.workspace }}/.kube/config

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: 🛎 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo usermod -aG docker $USER
          newgrp docker

      - name: ⚙️ Install cluster tools
        run: |
          curl -sL https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: 🛠️ Create cluster
        run: |
          k3d cluster create ${{ env.CLUSTER_NAME }} \
            -p "4004:30004@loadbalancer" \
            --wait \
            --volume="/var/run/docker.sock:/var/run/docker.sock"  # Add Docker socket mount

      - name: 🏗 Build and import images
        run: |
          # Build images using host Docker daemon
          make build
          
          # Connect k3d to host Docker registry
          k3d registry connect mycluster-registry
          
          # Push images to cluster registry
          for service in auth-service patient-service api-gateway billing-service analytics-service; do
            docker tag $service:latest k3d-mycluster-registry:5000/$service:latest
            docker push k3d-mycluster-registry:5000/$service:latest
          done

      - name: 🚀 Deploy system
        run: |
          # Update deployments to use cluster registry
          sed -i 's/image: \(.*\):latest/image: k3d-mycluster-registry:5000\/\1:latest/g' k3s/*/*.yaml
          make deploy

      - name: 🔍 Verify images
        run: |
          # Check node images
          kubectl get nodes -o name | xargs -I {} kubectl debug {} -it --image=busybox -- sh -c "ctr -n k8s.io images list"

          # Check deployment specs
          kubectl get deployments -o jsonpath='{range .items[*]}{.metadata.name}{": "}{.spec.template.spec.containers[*].image}{"\n"}{end}'

      - name: ⏳ Wait for services
        run: |
          docker image ls
          sleep 5
          make status
          # kubectl wait --for=condition=available --timeout=300s deployment/api-gateway
          # kubectl wait --for=condition=available --timeout=300s deployment/auth-service
          # kubectl wait --for=condition=available --timeout=300s deployment/patient-service
          sleep 20  # Wait for ingress propagation
          make status

      - name: 🧪 Run tests
        run: |
          curl --retry 5 --retry-delay 10 --retry-connrefused -sSf http://localhost:30004/api-docs/auth | grep -q "openapi" || (echo "❌ Auth Service API Docs Check Failed"; exit 1)
          curl --retry 5 --retry-delay 10 --retry-connrefused -sSf http://localhost:30004/api-docs/patients | grep -q "openapi" || (echo "❌ Patient Service API Docs Check Failed"; exit 1)

      - name: 📊 Final status
        if: always()
        run: make status

      - name: 🧹 Cleanup
        if: always()
        run: make down