name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    steps:
      - name: 🛎 Checkout code
        uses: actions/checkout@v2

      - name: 🐳 Install Docker
        run: |
          # Remove conflicting packages
          sudo apt-get remove -y containerd docker docker-engine docker.io
          
          # Add Docker's official GPG key
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          
          # Set up the repository
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          
          # Update and install
          sudo apt-get update -qq
          sudo apt-get install -y -qq docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          
          # Configure permissions
          sudo usermod -aG docker $USER
          newgrp docker

      - name: ⚙️ Install k3s and dependencies
        run: |
          # Install kubectl first
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Install k3s with Docker runtime
          curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="--tls-san 0.0.0.0" sh -
          
          # Configure kubectl access
          mkdir -p ${HOME}/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml ${HOME}/.kube/config
          sudo chown -R $USER ${HOME}/.kube
          sed -i 's/127.0.0.1/0.0.0.0/g' ${HOME}/.kube/config
          echo "export KUBECONFIG=${HOME}/.kube/config" >> ${HOME}/.bashrc
          
          # Verify installation
          # kubectl version --client
          # kubectl cluster-info
          # kubectl get nodes

      - name: 🏗 Build Docker images
        run: make build

      - name: 🚀 Deploy to cluster
        run: |
          make deploy
          kubectl get pods --watch-all &


      - name: 🔍 Troubleshoot Cluster
        if: failure()
        run: |
          kubectl get events --sort-by=.metadata.creationTimestamp
          kubectl describe pods -l app=api-gateway
          kubectl logs -l app=api-gateway --all-containers=true

      - name: ⏳ Wait for services to be ready
        run: |
          export KUBECONFIG=${HOME}/.kube/config
          sleep 40
          # # Wait for critical dependencies first
          # kubectl wait --for=condition=available --timeout=400s deployment/auth-service
          # kubectl wait --for=condition=available --timeout=400s deployment/patient-service
          
          # # Debug API Gateway if needed
          # kubectl describe deployment api-gateway
          # kubectl logs -l app=api-gateway --all-containers=true --prefix=true --tail=50
          
          # # Wait for API Gateway with longer timeout
          # kubectl wait --for=condition=available --timeout=400s deployment/api-gateway
          
          # Show detailed status
          make status
          kubectl logs -l app=auth-service --all-containers=true
          kubectl logs -l app=patient-service --all-containers=true
          kubectl describe pods -l app=auth-service
          kubectl describe pods -l app=patient-service

      - name: 🧪 Test API endpoints
        run: |
          echo "Testing API documentation endpoints..."
          # Test auth-service API docs
          curl  http://localhost:30004/api-docs/auth | grep -q "openapi" || (echo "❌ Auth Service API Docs Check Failed"; exit 1)
          echo "✅ Auth Service API Docs Verified"
          
          # Test patient-service API docs
          curl  http://localhost:30004/api-docs/patients | grep -q "openapi" || (echo "❌ Patient Service API Docs Check Failed"; exit 1)
          echo "✅ Patient Service API Docs Verified"
